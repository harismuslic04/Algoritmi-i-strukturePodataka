// /* Doubly Linked List implementation */
// #include<stdio.h>
// #include<stdlib.h>

// struct Node  {
// 	int data;
// 	struct Node* next;
// 	struct Node* prev;
// };

// struct Node* head; // global variable - pointer to head node.

// //Creates a new Node and returns pointer to it. 
// struct Node* GetNewNode(int x) {
// 	struct Node* newNode
// 		= (struct Node*)malloc(sizeof(struct Node));
// 	newNode->data = x;
// 	newNode->prev = NULL;
// 	newNode->next = NULL;
// 	return newNode;
// }

// //Inserts a Node at head of doubly linked list
// void InsertAtHead(int x) {
// 	struct Node* newNode = GetNewNode(x);
// 	if(head == NULL) {
// 		head = newNode;
// 		return;
// 	}
// 	head->prev = newNode;
// 	newNode->next = head; 
// 	head = newNode;
// }

// //Inserts a Node at tail of Doubly linked list
// void InsertAtTail(int x) {
// 	struct Node* temp = head;
// 	struct Node* newNode = GetNewNode(x);
// 	if(head == NULL) {
// 		head = newNode;
// 		return;
// 	}
// 	while(temp->next != NULL) temp = temp->next; // Go To last Node
// 	temp->next = newNode;
// 	newNode->prev = temp;
// }

// //Prints all the elements in linked list in forward traversal order
// void Print() {
// 	struct Node* temp = head;
// 	printf("Forward: ");
// 	while(temp != NULL) {
// 		printf("%d ",temp->data);
// 		temp = temp->next;
// 	}
// 	printf("\n");
// }

// //Prints all elements in linked list in reverse traversal order. 
// void ReversePrint() {
// 	struct Node* temp = head;
// 	if(temp == NULL) return; // empty list, exit
// 	// Going to last Node
// 	while(temp->next != NULL) {
// 		temp = temp->next;
// 	}
// 	// Traversing backward using prev pointer
// 	printf("Reverse: ");
// 	while(temp != NULL) {
// 		printf("%d ",temp->data);
// 		temp = temp->prev;
// 	}
// 	printf("\n");
// }

// int main() {

// 	/*Driver code to test the implementation*/
// 	head = NULL; // empty list. set head as NULL. 
	
// 	// Calling an Insert and printing list both in forward as well as reverse direction. 
// 	InsertAtTail(2); Print(); ReversePrint();
// 	InsertAtTail(4); Print(); ReversePrint();
// 	InsertAtHead(6); Print(); ReversePrint();
// 	InsertAtTail(8); Print(); ReversePrint();
	
// }

// #include<stdio.h>
// #include<stdlib.h>
// typedef struct Node
 
// {
//     int info;
//     struct Node *next;
// }node;
 
// node *front=NULL,*rear=NULL,*temp;
 
// void create();
// void del();
// void display();
 
// int main()
// {
//     int chc;
//     do
//     {
//      printf("\nMenu\n\t 1 to create the element : ");
//     printf("\n\t 2 to delete the element : ");
//     printf("\n\t 3 to display the list : ");
//     printf("\n\t 4 to exit from main : ");
//     printf("\nEnter your choice : ");
//     scanf("%d",&chc);
    
//         switch(chc)
//         {
//             case 1:
//              create();
//             break;
         
//              case 2:
//              del();
//              break;
     
//              case 3:
//              display();
//              break;
     
//              case 4:
//              return 1;
             
//             default:
//                  printf("\nInvalid choice :");
//          }
//     }while(1);
 
//     return 0;
// }
 
// void create()
// {
//     node *newnode;
//     newnode=(node*)malloc(sizeof(node));
//     printf("\nEnter the node value : ");
//     scanf("%d",&newnode->info);
//     newnode->next=NULL;
//     if(rear==NULL)
//     front=rear=newnode;
//     else
//     {
//         rear->next=newnode;
//         rear=newnode;
//     }
    
//     rear->next=front;
// }
 
// void del()
// {
//     temp=front;
//     if(front==NULL)
//         printf("\nUnderflow :");
//     else
//     {
//         if(front==rear)
//         {
//             // printf("\n%d",front->info);
//             front=rear=NULL;
//         }
//         else
//         {
//             // printf("\n%d",front->info);
//             front=front->next;
//             rear->next=front;
//         }
 
//     temp->next=NULL;
//     free(temp);
//     }
// }
 
// void display()
// {
//     temp=front;
//     if(front==NULL)
//         printf("\nEmpty");
//     else
//     {
//         printf("\n");
//         for(;temp!=rear;temp=temp->next)
//             printf("\n%d address=%u next=%u\t",temp->info,temp,temp->next);
//             printf("\n%d address=%u next=%u\t",temp->info,temp,temp->next);
//     }
// }


// #include <stdio.h>
// #include <stdlib.h>
// typedef struct node{
//     int data;
//     struct node *next;
// }NODE;
// NODE *first=NULL,*last=NULL,*temp=NULL,*curr=NULL,*prev=NULL,*next=NULL;


// int isEmpty(){
//     if(first==NULL)return 1;
//     return 0;
// }



// void create(int el){
//     temp=(struct node*)malloc(sizeof(struct node));
//     temp->data=el;
//     temp->next=NULL;
//     if(isEmpty()){
//         first=temp;
//         last=temp;
//     }
//     else{
//         last->next=temp;
//         last=temp;
//     }
// }



// struct NODE *reverse(NODE *first)
// {   
//     curr=first;
    
//     while (curr != NULL) {
//         next = curr->next;
//         curr->next = prev;
//         prev = curr;
//         curr = next;
//     }
//     return prev;
// }


// void display(){
//     temp=first;
//     while(temp!=NULL){
//         printf("%d ",temp->data);
//         temp=temp->next;
// }}


// int main()
// {
//     create(4);
//     create(5);
//     create(6);
//     first=reverse(first);
//     display();
// }